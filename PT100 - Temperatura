#include <OneWire.h>

// Define los pines para los sensores DS18S20
int DS18S20_Pins[] = {2, 3, 4};

// Número de sensores
int numSensors = sizeof(DS18S20_Pins) / sizeof(DS18S20_Pins[0]);

// Arreglo de instancias de OneWire para cada sensor
OneWire ds[] = {OneWire(DS18S20_Pins[0]), OneWire(DS18S20_Pins[1]), OneWire(DS18S20_Pins[2])};

void setup(void) {
  Serial.begin(9600);
}

void loop(void) {
  for (int i = 0; i < numSensors; i++) {
    float temperature = getTemp(i);
    Serial.print("Sensor ");
    Serial.print(i + 1);
    Serial.print(": ");
    Serial.println(temperature);
  }

  delay(60000); // Solo para ralentizar la salida y hacerla más fácil de leer
}

float getTemp(int sensorIndex) {
  // Devuelve la temperatura de un DS18S20 en grados Celsius

  byte data[12];
  byte addr[8];

  if (!ds[sensorIndex].search(addr)) {
    // No hay más sensores en la cadena, reinicia la búsqueda
    //Serial.println("No hay más sensores en la cadena, reinicia la búsqueda");
    ds[sensorIndex].reset_search();
    return -1000;
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
    Serial.println("CRC no es válido!");
    return -1000;
  }

  if (addr[0] != 0x10 && addr[0] != 0x28) {
    Serial.print("El dispositivo no es reconocido");
    return -1000;
  }

  ds[sensorIndex].reset();
  ds[sensorIndex].select(addr);
  ds[sensorIndex].write(0x44, 1); // Iniciar la conversión, con alimentación parásita al final

  byte present = ds[sensorIndex].reset();
  ds[sensorIndex].select(addr);
  ds[sensorIndex].write(0xBE); // Leer Scratchpad

  for (int i = 0; i < 9; i++) { // Necesitamos 9 bytes
    data[i] = ds[sensorIndex].read();
  }

  ds[sensorIndex].reset_search();

  byte MSB = data[1];
  byte LSB = data[0];

  float tempRead = ((MSB << 8) | LSB); // Usando complemento a dos
  float TemperatureSum = tempRead / 16;

  return TemperatureSum;
}
