#include <OneWire.h>

// Define los pines para los sensores DS18S20
int DS18S20_Pins[] = {2, 3, 4};

// Número de sensores
int numSensors = sizeof(DS18S20_Pins) / sizeof(DS18S20_Pins[0]);

// Arreglo de instancias de OneWire para cada sensor
OneWire ds[] = {OneWire(DS18S20_Pins[0]), OneWire(DS18S20_Pins[1]), OneWire(DS18S20_Pins[2])};

void setup(void) {
  Serial.begin(9600);
}

void loop(void) {
  for (int i = 0; i < numSensors; i++) {
    float temperature = getTemp(i);
    Serial.print(temperature);
    if (i < numSensors - 1) {
      Serial.print(", ");
    }
  }

  Serial.println(); // Nueva línea para la siguiente iteración

  delay(6000); // Solo para ralentizar la salida y hacerla más fácil de leer
}

float getTemp(int sensorIndex) {
  // Resto del código para la lectura de la temperatura de los sensores DS18S20

  byte data[12];
  byte addr[8];

  if (!ds[sensorIndex].search(addr)) {
    ds[sensorIndex].reset_search();
    return -1000;
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
    return -1000;
  }

  if (addr[0] != 0x10 && addr[0] != 0x28) {
    return -1000;
  }

  ds[sensorIndex].reset();
  ds[sensorIndex].select(addr);
  ds[sensorIndex].write(0x44, 1);

  byte present = ds[sensorIndex].reset();
  ds[sensorIndex].select(addr);
  ds[sensorIndex].write(0xBE);

  for (int i = 0; i < 9; i++) {
    data[i] = ds[sensorIndex].read();
  }

  ds[sensorIndex].reset_search();

  byte MSB = data[1];
  byte LSB = data[0];

  float tempRead = ((MSB << 8) | LSB);
  float TemperatureSum = tempRead / 16;

  return TemperatureSum;
}
